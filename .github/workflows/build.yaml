name: Build

on:
  push:
    tags:
      - 'v*'

jobs:
  createrelease:
    name: Create Release
    runs-on: [ubuntu-latest]
    steps:
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: Release ${{ github.ref }}
        draft: false
        prerelease: false
    - name: Output Release URL File
      run: echo "${{ steps.create_release.outputs.upload_url }}" > release_url.txt
    - name: Save Release URL File for publish
      uses: actions/upload-artifact@v3
      with:
        name: release_url
        path: release_url.txt

  build:
    name: Build packages
    needs: createrelease
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: windows-latest
            TARGET: windows
            CMD_BUILD: pyinstaller -F -n MihoyoBBSTools-${{ github.ref_name }}-Win-x64 main.py
            OUT_FILE_NAME: MihoyoBBSTools-${{ github.ref_name }}-Win-x64.exe
            ASSET_MIME: application/vnd.microsoft.portable-executable
          - os: ubuntu-latest
            TARGET: linux
            CMD_BUILD: pyinstaller -F -n MihoyoBBSTools-${{ github.ref_name }}-Linux-x64 main.py
            OUT_FILE_NAME: MihoyoBBSTools-${{ github.ref_name }}-Linux-x64
            ASSET_MIME: application/zip 
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python 3.12
      uses: actions/setup-python@v2
      with:
        python-version: 3.12
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt        
    - name: Build with pyinstaller for ${{ matrix.TARGET }}
      run: ${{ matrix.CMD_BUILD }}
    - name: Create a zip of the config folder
      run: |
        mkdir -p ./dist/config.zip
        zip -r ./dist/config.zip ./config
    - name: Load Release URL File from release job
      uses: actions/download-artifact@v4
      with:
        name: release_url
    - name: Get Release File Name & Upload URL
      id: get_release_info
      shell: bash
      run: |
        value=`cat release_url/release_url.txt`
        echo ::set-output name=upload_url::$value        
    - name: Upload Release Asset for App
      id: upload-release-asset-app
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: ./dist/${{ matrix.OUT_FILE_NAME }}
        asset_name: ${{ matrix.OUT_FILE_NAME }}
        asset_content_type: ${{ matrix.ASSET_MIME }}
    - name: Upload Release Asset for Config
      id: upload-release-asset-config
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.get_release_info.outputs.upload_url }}
        asset_path: ./dist/config.zip
        asset_name: config.zip
        asset_content_type: application/zip
